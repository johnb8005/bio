{"version":3,"sources":["form/textarea.js","bio.js","App.js","serviceWorker.js","index.js"],"names":["Textarea","className","this","props","type","placeholder","value","onChange","onFocus","onBlur","disabled","style","autoFocus","React","Component","NexysReactUtil","codonToAa","map","a","l","short","name","codon","anticodon","str","Array","from","join","dnaToRna","codons","match","compFunc","typeid","Bio","App","form","Utils","ds","updateObject","state","setState","compute","out","func","in","renderOptions","option","key","onClick","Fragment","renderResult","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78ef9912.chunk.js","sourcesContent":["import React from 'react';\n\nimport NexysReactUtil from '@nexys/reactutils';\n\nclass Textarea extends React.Component {\n  render() {\n    return (<textarea\n      className={this.props.className}\n      type={this.props.type}\n      placeholder={this.props.placeholder}\n      value={this.props.value}\n      onChange={this.props.onChange}\n      onFocus={this.props.onFocus}\n      onBlur={this.props.onBlur}\n      disabled={this.props.disabled}\n      style={this.props.style}\n      autoFocus={this.props.autoFocus}\n      />);\n  }\n}\n\nexport default NexysReactUtil.Textarea()(Textarea);","\n\n//case class AminoAcid(l: Char, short: String, name: String)\n\n/**\n * @see https://en.wikipedia.org/wiki/Amino_acid\n */\nexport const aas = [\n  ['F', \"Phe\", \"Phenylananine\"],\n  ['L', \"Leu\", \"Leucine\"],\n  ['I', \"Ile\", \"Isoleucine\"],\n  ['M', \"Met\", \"Methionine\"],\n  ['V', \"Val\", \"Valine\"],\n  ['S', \"Ser\", \"Serine\"],\n  ['P', \"Pro\", \"Proline\"],\n  ['T', \"Thr\", \"Threonine\"],\n  ['A', \"Ala\", \"Alanine\"],\n  ['Y', \"Tyr\", \"Tyrosine\"],\n  ['H', \"His\", \"Histidine\"],\n  ['Q', \"Gln\", \"Glutamine\"],\n  ['K', \"Lys\", \"Lysine\"],\n  ['D', \"Asp\", \"Aspartic Acid\"],\n  ['E', \"Glu\", \"Glutamic Acid\"],\n  ['C', \"Cys\", \"Cysteine\"],\n  ['W', \"Trp\", \"Tryptophane\"],\n  ['R', \"Arg\", \"Arginine\"],\n  ['S', \"Ser\", \"Serine\"],\n  ['G', \"Gly\", \"Glycine\"],\n  ['U', \"Sec\", \"Selenocysteine\"], // 21st aa\n  ['O', \"Pyr\", \"Pyrrolysine\"] // not in humans\n].map(a => {\n  return {l: a[0], short: a[1], name: a[2]}\n});\n\n/*\n  R => purines abbreviated as R (G|A)\n  Y => pyrimidines abbiviated as Y (C|T)\n  N => any (A|T|G|C)\n  M/H => all but G (A|T|C)\n*/\nexport const aaToCodon= (codon) => {\n  const hm = {\n    'A': 'GCN',\n    'R': 'CGN', //\"MGR\"\n    'N': 'AAY',\n    'D': 'GAY',\n    'C': 'TGY',\n    'Q': 'CAR',\n    'E': 'GAR',\n    'G': 'GGN',\n    'H': 'CAY',\n    'I': 'ATM',\n    'L': 'CTN', //\"YTR\" \n    'K': 'AAR',\n    'M': 'ATG',\n    'F': 'TTY',\n    'P': 'CCN',\n    'S': 'TCN', // \"AGY\"\n    'T': 'ACN',\n    'W': 'TGG',\n    'Y': 'TAY',\n    'V': 'GTN',\n    /* stop codon */\n    ')': 'TAA',\n    ']': 'TAG',     \n    '}': 'TGA',\n  }\n\n  const r = hm[codon];\n\n  if(r) {\n    return r;\n  }\n\n  return null;\n};\n\nexport const codonToAa = codon => {\n  switch(codon) {\n    case \"TTT\":\n    case \"TTC\":\n      return 'F';\n    case \"TTG\":\n    case \"TTA\":\n    case \"CTT\":\n    case \"CTC\":\n    case \"CTA\":\n    case \"CTG\":\n      return 'L';\n    case \"ATA\":\n    case \"ATT\":\n    case \"ATC\":\n      return 'I';\n    case \"ATG\":\n      return 'M';\n    case \"GTT\":\n    case \"GTC\":\n    case \"GTA\":\n    case \"GTG\":\n      return 'V';\n    case \"TCT\":\n    case \"TCC\":\n    case \"TCA\":\n    case \"TCG\":\n      return 'S';\n    case \"CCT\":\n    case \"CCC\":\n    case \"CCA\":\n    case \"CCG\":\n      return 'P';\n    case \"ACT\":\n    case \"ACC\":\n    case \"ACA\":\n    case \"ACG\":\n      return 'T';\n    case \"GCT\":\n    case \"GCC\":\n    case \"GCA\":\n    case \"GCG\":\n      return 'A';\n    case \"TAT\":\n    case \"TAC\":\n      return 'Y';\n    case \"TAA\":\n      return ')';\n    case \"TAG\":\n      return ']';\n    case \"CAT\":\n    case \"CAC\":\n      return 'H';\n    case \"CAA\":\n    case \"CAG\":\n      return 'Q';\n    case \"AAT\":\n    case \"AAC\":\n      return 'N';\n    case \"AAA\":\n    case \"AAG\":\n      return 'K';\n    case \"GAT\":\n    case \"GAC\":\n      return 'D';\n    case \"GAA\":\n    case \"GAG\":\n      return 'E';\n    case \"TGT\":\n    case \"TGC\":\n      return 'C';\n    case \"TGA\":\n      return '}';\n    case \"TGG\":\n      return 'W';\n    case \"CGT\":\n    case \"CGC\":\n    case \"CGA\":\n    case \"CGG\":\n      return 'R';\n    case \"AGT\":\n    case \"AGC\":\n      return 'S';\n    case \"AGA\":\n    case \"AGG\":\n      return 'R';\n    case \"GGT\":\n    case \"GGC\":\n    case \"GGA\":\n    case \"GGG\":\n      return 'G';\n      break;\n    default:\n      return null;\n  }\n}\n\nexport const anticodon = (str) => {\n  return Array.from(str).map(a=> {\n    switch(a) {\n      case 'A' :\n        return 'T'\n      case 'T':\n        return 'A'\n      case 'G':\n        return 'C'\n      case 'C':\n        return 'G'\n      case 'U':\n        return 'A'\n        break;\n      default:\n        return null;\n    }\n  }).join('');\n};\n\nexport const dnaToRna = str => {\n  return Array.from(str).map(a => {\n    switch (a) {\n      case 'A':\n      case 'G':\n      case 'C':\n        return a;\n      case 'T':\n        return 'U';\n        break;\n      default:\n        return null;\n    }\n  }).join('');\n};\n\nexport const codons = str => {\n  // divide the string in subset strings of length 3\n  const codons = str.match(/.{1,3}/g);\n\n  if (!codons) {\n    return '';\n  } \n\n  return codons.map(codonToAa).join('');\n}\n","import React from 'react';\nimport UtilReact from '@nexys/reactutils';\nimport Utils from '@nexys/utils';\n\nimport Textarea from './form/textarea';\n\nimport * as Bio from './bio';\n\nconst compFunc = typeid => {\n  switch(typeid) {\n    case 1:\n      return Bio.dnaToRna;\n    case 2:\n      return Bio.anticodon;\n    case 3:\n      return Bio.codons;\n      break;\n    default:\n      return Bio.dnaToRna;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = { form: {in: ''}, out: null, typeid: null };\n  }\n\n  onChange = (a) => {\n    const form = Utils.ds.updateObject(this.state.form, a);\n\n    this.setState({form});\n  }\n\n  compute = (typeid) => {\n    const { form } = this.state;\n\n    const func = compFunc(typeid);\n    const out = func(form.in);\n\n    this.setState({out, typeid});\n  }\n\n  renderOptions = () => {\n    const { typeid } = this.state;\n    const options = [\n      {typeid: 1, name: 'DNA to RNA'},\n      {typeid: 2, name: 'AntiCodon'},\n      {typeid: 3, name: 'Codon to AAs'}\n    ];\n\n    return <ul className=\"nav\">{options.map(option => {\n      const className = typeid === option.typeid ? 'btn-primary' : 'btn-secondary';\n      return (<li key={option.typeid} className=\"nav-item\">\n        <button className={`btn btn-sm ${className}`} onClick={() => this.compute(option.typeid)}>{option.name}</button>\n      </li>);\n    })}</ul>;\n  } \n\n  renderResult() {\n    const { out } = this.state;\n\n    if (!out || out === '') {\n      return null;\n    }\n\n    return <React.Fragment>\n      <h3>Result</h3>\n      <pre>{out}</pre>\n    </React.Fragment>;\n  }\n\n  render() {\n    const { out, form } = this.state;\n\n    return (<div className=\"container\">\n        <h1>DNA Manipulations</h1>\n        \n        <p>Insert input in following textarea</p>\n\n        <Textarea name=\"in\" value={form.in} onChange={this.onChange}/>\n\n        <div className=\"row\"> \n          <div className=\"col-md-12\">\n            {this.renderOptions()}\n          </div>\n        </div>\n\n        <div className=\"row\"> \n          <div className=\"col-md-12\">\n            {this.renderResult()}\n          </div>\n        </div>\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}